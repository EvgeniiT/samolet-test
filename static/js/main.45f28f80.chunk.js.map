{"version":3,"sources":["app.js","api.js","serviceWorker.js","index.js"],"names":["Test","data","id","useParams","JSON","stringify","App","useState","setData","useEffect","fetch","then","response","json","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","locale","ruRU","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAMA,IAAMA,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACLC,EAAOC,cAAPD,GACR,OACE,oCACE,yCAAeA,GACf,6BACIE,KAAKC,UAAUJ,EAAM,KAAM,MAOtB,SAASK,IAAO,IAAD,EACJC,mBAAS,IADL,mBACrBN,EADqB,KACfO,EADe,KAO5B,OAJAC,qBAAU,WCrBHC,MAAM,gGACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDqBjBF,KAAKH,KACd,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,gBAAgBC,UAAW,kBAAM,kBAAC,EAAD,CAAMf,KAAMA,OAG/D,kBAAC,IAAD,CAAOc,KAAK,oBAAoBC,UAAW,kBAAM,kBAAC,EAAD,CAAMf,KAAMA,SEpBjDgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,OCPnCC,IAASC,OACP,kBAAC,IAAD,CAAgBC,OAAQC,KACtB,kBAAC,IAAD,KACE,kBAACnB,EAAD,QAGJoB,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.45f28f80.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Layout } from 'antd';\r\nimport { Switch, Route, useParams } from 'react-router-dom';\r\nimport './app.css';\r\nimport { getData } from \"./api\";\r\n\r\nconst Test = ({data}) => {\r\n  const { id } = useParams();\r\n  return (\r\n    <>\r\n      <p>id ravno = {id}</p>\r\n      <pre>\r\n        { JSON.stringify(data, null, 2) }\r\n      </pre>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default function App() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData().then(setData);\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      <Switch>\r\n        <Route exact path=\"/samolet-test\" component={() => <Test data={data} />}/>\r\n          {/* <Test data={data}/>\r\n        </Route> */}\r\n        <Route path=\"/samolet-test/:id\" component={() => <Test data={data} />}/>\r\n          {/* <Test data={data}/>\r\n        </Route> */}\r\n      </Switch>\r\n    </Layout>\r\n  );\r\n}\r\n","export function getData() {\r\n  return fetch('opendata/7705851331-stat_library/data-2016-11-10T00-00-00-structure-2016-09-12T00-00-00.json')\r\n    .then(response => response.json())\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ConfigProvider } from 'antd';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport ruRU from 'antd/lib/locale-provider/ru_RU';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nReactDOM.render(\r\n  <ConfigProvider locale={ruRU}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </ConfigProvider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}